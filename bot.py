import telebot
from telebot import types
import sqlite3
import data
import time
import threading, time
import schedule
import matplotlib.pyplot as plt
import numpy as np
import os
import diagrams

from telebot.handler_backends import BaseMiddleware
from telebot.handler_backends import CancelUpdate

token = '<your token>'
bot = telebot.TeleBot(token, use_class_middlewares=True)
user = []
categories = {"Products" : ['–ø—Ä–æ–¥—É–∫—Ç—ã', '–µ–¥–∞'], "Internet" : ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–∏–Ω–µ—Ç'], "Cafe" : ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'], "Coffee" : '–∫–æ—Ñ–µ', "House" : ['–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞', '–∂–∫—Ö'], "Books" : '–∫–Ω–∏–≥–∏', "Lunch" : ['–ª–∞–Ω—á', '–æ–±–µ–¥', '—Å—Ç–æ–ª–æ–≤–∞—è'], "Transport" : ['–º–∞—Ä—à—Ä—É—Ç–∫–∞', '–≥–∞–∑–µ–ª—å', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'], "Phone" : ['—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–≤—è–∑—å'], "Subs" : ['–ø–æ–¥–ø–∏—Å–∫–∞', '–ø–æ–¥–ø–∏—Å–∫–∏'], "Taxi" : '—Ç–∞–∫—Å–∏'}
menu_m = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_m.add('üí∞ –ú–æ–∏ –¢—Ä–∞—Ç—ã', 'üìã –¢—Ä–∞—Ç—ã –ü–æ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'üóÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –î–∏–∞–≥—Ä–∞–º–º—É', '‚ùî –ü–æ–º–æ—â—å')

#========–ê–ù–¢–ò –°–ü–ê–ú –°–ò–°–¢–ï–ú–ê========#
class SimpleMiddleware(BaseMiddleware):
    def __init__(self, limit) -> None:
        self.last_time = {}
        self.limit = limit
        self.update_types = ['message']

    def pre_process(self, message, data):
        if not message.from_user.id in self.last_time:
            self.last_time[message.from_user.id] = message.date
            return
        if message.date - self.last_time[message.from_user.id] < self.limit:
            bot.delete_message(message.chat.id, message.id)
            return CancelUpdate()
        self.last_time[message.from_user.id] = message.date

        
    def post_process(self, message, data, exception):
        pass
bot.setup_middleware(SimpleMiddleware(2))
#===================================#

with sqlite3.connect("finance.db") as db:
    cursor = db.cursor()
    q = ("""CREATE TABLE IF NOT EXISTS users(id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, name VARCHAR(50), day_spent INTEGER NOT NULL DEFAULT 0, month_spend INTEGER NOT NULL DEFAULT 0, base INTEGER NOT NULL DEFAULT 0, base_spent INTEGER NOT NULL DEFAULT 0, day_income INTEGER NOT NULL DEFAULT 0, month_income INTEGER NOT NULL DEFAULT 0); CREATE TABLE IF NOT EXISTS categories(id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, Products INTEGER NOT NULL DEFAULT 0, Internet INTEGER NOT NULL DEFAULT 0, Cafe INTEGER NOT NULL DEFAULT 0, Coffee INTEGER NOT NULL DEFAULT 0, House INTEGER NOT NULL DEFAULT 0, Books INTEGER NOT NULL DEFAULT 0, Lunch INTEGER NOT NULL DEFAULT 0, Transport INTEGER NOT NULL DEFAULT 0, Taxi INTEGER NOT NULL DEFAULT 0, Phone INTEGER NOT NULL DEFAULT 0, Subs INTEGER NOT NULL DEFAULT 0, Other INTEGER NOT NULL DEFAULT 0)""")
    cursor.executescript(q)

@bot.message_handler(commands=['start'])
def start_message(message):
    if data.user_exists(message.from_user.id == None):
     ap = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø - —Å–∞–º—ã–π —É–¥–æ–±–Ω—ã–π –∏ —É–º–Ω—ã–π –±–æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—á—ë—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è")
     bot.register_next_step_handler(ap, enter_base)
    else:
        main_msg(message)

@bot.message_handler(commands=['menu'])
def menu(message):
     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
     markup.add('üí∞ –ú–æ–∏ –¢—Ä–∞—Ç—ã', 'üìã –¢—Ä–∞—Ç—ã –ü–æ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'üóÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –î–∏–∞–≥—Ä–∞–º–º—É', '‚ùî –ü–æ–º–æ—â—å')
     bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∂—É –º–µ–Ω—é...", reply_markup=markup)
     main_msg(message)

def enter_base(message):
    global user
    name = message.text
    user.append(name)
    print(user)
    ix = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ *–Ω—É–∂–Ω–æ* —á—Ç–æ–±—ã –∂–∏—Ç—å, —ç—Ç–æ –±—É–¥—É—Ç —Ç–≤–æ–∏ *–±–∞–∑–æ–≤—ã–µ* —Ä–∞—Å—Ö–æ–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç—ã, –∂–∏–ª—å–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Ç.–¥", parse_mode="Markdown")
    bot.register_next_step_handler(ix, all_done)

def all_done(message):
    global user, menu_m
    base = message.text
    if str(base).isdigit() == True:
     data.add_user(message.chat.id, user[0], base)
     bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ! –°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º...", reply_markup=menu_m)
     time.sleep(2)
     main_msg(message)
    else:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ!")
        enter_base(message)

def main_msg(message):
    user_id = message.from_user.id
    base_text = ''
    inc_text = ''
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='üí∏ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥', callback_data='money_plus')
    markup.add(btn)
    if int(data.get_info(user_id)[4]) > int(data.get_info(user_id)[3]):
        percent = ((int(data.get_info(user_id)[4]) - int(data.get_info(user_id)[3])) / int(data.get_info(user_id)[3])) * 100
        rub = int(data.get_info(user_id)[4]) - int(data.get_info(user_id)[3])
        base_text = f"\n–ü—Ä–µ–≤—ã—à–µ–Ω—ã –Ω–∞ {rub} —Ä—É–±–ª–µ–π ({round(percent)}%)"
    if int(data.get_info(user_id)[2]) > int(data.get_info(user_id)[6]):
        percent2 = ((int(data.get_info(user_id)[2]) - int(data.get_info(user_id)[6])) / int(data.get_info(user_id)[6])) * 100
        rub2 = int(data.get_info(user_id)[2]) - int(data.get_info(user_id)[6])
        inc_text = f"\n–†–∞—Å—Ö–æ–¥—ã –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ {rub2} —Ä—É–±–ª–µ–π ({round(percent2)}%)"
        print(inc_text)
    bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {data.get_info(user_id)[0]} üíé\n\nüí≥ *–í–æ—Ç —Ç–≤–æ–∏ —Ç—Ä–∞—Ç—ã:*\n–ó–∞ –¥–µ–Ω—å: {data.get_info(user_id)[1]} —Ä—É–±.\n–ó–∞ –º–µ—Å—è—Ü: {data.get_info(user_id)[2]} —Ä—É–±.\n–ë–∞–∑–æ–≤—ã–µ: {data.get_info(user_id)[4]} –∏–∑ {data.get_info(user_id)[3]} —Ä—É–±.{base_text}\n\nüíµ *–í–æ—Ç —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã:*\n–î–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {data.get_info(user_id)[5]} —Ä—É–±.\n–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {data.get_info(user_id)[6]} —Ä—É–±.{inc_text}", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(content_types=['text'])
def text_proc(message, f=None):
    global categories
    if message.text == 'üí∞ –ú–æ–∏ –¢—Ä–∞—Ç—ã':
        main_msg(message)
    elif message.text == '‚ùî –ü–æ–º–æ—â—å':
        bot.send_message(message.chat.id, "*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥/—Ç—Ä–∞—Ç—É?*\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ—Ç—É —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä '250 —Ç–∞–∫—Å–∏'\n\n*–ö–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–∞—Ç –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ –º–µ—Å—è—Ü?*\n–¢—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å –æ–±–Ω—É–ª—è—é—Ç—Å—è –≤ 00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è, —Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü –∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –∫–∞–∂–¥–æ–µ 1-–æ–µ —á–∏—Å–ª–æ –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å: @risely", parse_mode="Markdown")
    elif message.text == 'üóÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏':
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='insert_categorie')
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \n\n‚Ä¢–ü—Ä–æ–¥—É–∫—Ç—ã (–µ–¥–∞, –ø—Ä–æ–¥—É–∫—Ç—ã)\n‚Ä¢–ö–∞—Ñ–µ (–∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω)\n‚Ä¢–ö–æ—Ñ–µ (–∫–æ—Ñ–µ)\n‚Ä¢–û–±–µ–¥ (–ª–∞–Ω—á, –æ–±–µ–¥, —Å—Ç–æ–ª–æ–≤–∞—è)\n‚Ä¢–û–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–∞–≤—Ç–æ–±—É—Å, –º–µ—Ç—Ä–æ, –º–∞—Ä—à—Ä—É—Ç–∫–∞, –≥–∞–∑–µ–ª—å, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)\n‚Ä¢–ò–Ω—Ç–µ—Ä–Ω–µ—Ç (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –∏–Ω–µ—Ç)\n‚Ä¢–°–≤—è–∑—å (—Ç–µ–ª–µ—Ñ–æ–Ω, —Å–≤—è–∑—å)\n‚Ä¢–ü–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–¥–ø–∏—Å–∫–∏)\n‚Ä¢–¢–∞–∫—Å–∏\n‚Ä¢–ü—Ä–æ—á–µ–µ\n\n–¢—ã –º–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ", reply_markup=markup)
    elif message.text == 'üìã –¢—Ä–∞—Ç—ã –ü–æ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º':
        exp = data.get_cat_exp(message.from_user.id)
        print(exp)
        bot.send_message(message.chat.id, f"–í–æ—Ç —Ç–≤–æ–∏ *—Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*: \n\nü•¶ –ü—Ä–æ–¥—É–∫—Ç—ã: *{exp[0]}* —Ä—É–±.\nüå≠ –ö–∞—Ñ–µ: *{exp[2]}* —Ä—É–±.\nüåç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: *{exp[1]}* —Ä—É–±.\n‚òïÔ∏è –ö–æ—Ñ–µ: *{exp[3]}* —Ä—É–±.\nü•£ –û–±–µ–¥: {exp[6]} —Ä—É–±.\nüöç –û–±—â.–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: *{exp[7]}* —Ä—É–±.\nüìù –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞: *{exp[4]}* —Ä—É–±.\nüìñ –ö–Ω–∏–≥–∏: *{exp[5]}* —Ä—É–±.\n‚òéÔ∏è –°–≤—è–∑—å: *{exp[9]}* —Ä—É–±.\nüí≥ –ü–æ–¥–ø–∏—Å–∫–∏: *{exp[10]}* —Ä—É–±.\nüöñ –¢–∞–∫—Å–∏: *{exp[8]}* —Ä—É–±.\nüåÄ –ü—Ä–æ—á–µ–µ: *{exp[11]}* —Ä—É–±.", parse_mode="Markdown")
    elif message.text == 'üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å –î–∏–∞–≥—Ä–∞–º–º—É':
        if f == 'id':
            return message.from_user.id
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton(text='–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='diagr1')
        btn2 = types.InlineKeyboardButton(text='–î–æ—Ö–æ–¥—ã –∫ —Ä–∞—Å—Ö–æ–¥–∞–º', callback_data='diagr2')
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å:", reply_markup=markup)
    else:
        try:
         array = str(message.text).split()
         if str(array[0]).isdigit() == True and array.__len__() == 1:
           amount = array[0]
           bot.send_message(message.chat.id, f"–†–∞—Å—Ö–æ–¥ –≤ {amount} —Ä—É–±–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ '–ü—Ä–æ—á–µ–µ'")
           data.add_to_category(message.from_user.id, amount)
           data.add_expense(message.from_user.id, amount)
         else:
            amount = array[0]
            categorie = array[1]
            for key, value in categories.items():
              if categorie in value:
                print(key)
                bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ {amount} —Ä—É–±–ª–µ–π –Ω–∞ {categorie}")
                data.add_to_category(message.from_user.id, amount, key)
                data.add_expense(message.from_user.id, amount)
        except IndexError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ï—Å–ª–∏ *—Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É*, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–∞–∫, –ø—Ä–∏–º–µ—Ä: *'250 —Ç–∞–∫—Å–∏'* –∏–ª–∏ *'500 –ø—Ä–æ–¥—É–∫—Ç—ã'*, –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É, —Ç—Ä–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ü—Ä–æ—á–µ–µ'", parse_mode="Markdown")

@bot.callback_query_handler(func= lambda call: True)
def call(call):
    if call.data == 'money_plus':
        ue = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–æ—Ö–æ–¥—ã")
        bot.register_next_step_handler(ue, add_money)
    elif call.data == 'diagr1':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–í–∞—à–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥')
        round_1(call.message, call.from_user.id)
    elif call.data == 'diagr2':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–í–∞—à–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥')
        round_2(call.message, call.from_user.id)

def round_1(message, user_id):
    diagrams.diagr1(user_id)
    if diagrams.diagr1(user_id) == False:
        bot.send_message(message.chat.id, "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    else:
        photo = open(f'{user_id}_cat_exp.png', 'rb')
        bot.send_photo(chat_id=message.chat.id, photo=photo, caption='–í–æ—Ç —Ç–≤–æ—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')

def round_2(message, user_id):
    diagrams.diagr2(user_id)
    if diagrams.diagr2(user_id) == False:
        bot.send_message(message.chat.id, "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        photo = open(f'{user_id}_exp_inc.png', 'rb')
        bot.send_photo(chat_id=message.chat.id, photo=photo, caption='–í–æ—Ç —Ç–≤–æ—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫ –¥–æ—Ö–æ–¥–∞–º')

def add_money(message):
    data.add_income(message.text, message.from_user.id)
    bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥ –≤ {message.text} —Ä—É–±–ª–µ–π")

import schedule
import data

def days_nulling():
    data.null_days()
    print('Days nulled')

def month_nulling():
    data.null_month()
    print('Months was nulled successfully')

if __name__ == "__main__":
    threading.Thread(target=bot.infinity_polling, name='bot_infinity_polling', daemon=True).start()
    schedule.every().day.at('00:00').do(days_nulling)
    schedule.every(30).days.do(month_nulling)
    while True:
        schedule.run_pending()
        time.sleep(1)
